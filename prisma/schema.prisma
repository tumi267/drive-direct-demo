generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  BUYER
  SELLER
  DEALER
}

enum SubscriptionType {
  FREE
  BASIC
  PREMIUM
}

enum CarStatus {
  ACTIVE
  SOLD
  PENDING
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String?
  role          UserRole
  name          String?
  phone         String?
  dealers       Dealer[]
  cars          Car[]     @relation("SellerCars")
  notifications Notification[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Dealer {
  id                 String           @id @default(uuid())
  user               User             @relation(fields: [userId], references: [id])
  userId             String           @unique
  dealershipName     String
  subscriptionType  SubscriptionType  @default(FREE)
  subscriptionExpiry DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  offers            Offer[]
}

model Car {
  id            String      @id @default(uuid())
  seller        User        @relation("SellerCars", fields: [sellerId], references: [id])
  sellerId      String
  title         String
  description   String?
  make          String
  model         String
  year          Int
  price         Float
  mileage       Int?
  fuelType      String
  transmission  String
  status        CarStatus   @default(ACTIVE)
  location      String?
  tags          CarTag[]
  offers        Offer[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model CarTag {
  id        String  @id @default(uuid())
  car       Car     @relation(fields: [carId], references: [id])
  carId     String
  tag       String
  createdAt DateTime @default(now())
}

model Offer {
  id          String      @id @default(uuid())
  dealer      Dealer      @relation(fields: [dealerId], references: [id])
  dealerId    String
  car         Car         @relation(fields: [carId], references: [id])
  carId       String
  offerPrice  Float
  message     String?
  status      OfferStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}
